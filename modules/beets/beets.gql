extend type Query {
    beetsGetProtocolData: GqlBeetsProtocolData!
    beetsGetBeetsFarms: [GqlBeetsFarm!]!
    beetsGetUserDataForFarm(farmId: String!): GqlBeetsFarmUser
    beetsGetUserDataForAllFarms: [GqlBeetsFarmUser!]!
    beetsGetConfig: GqlBeetsConfig!
}

type GqlBeetsProtocolData {
    totalLiquidity: BigDecimal!
    totalSwapVolume: BigDecimal!
    totalSwapFee: BigDecimal!
    poolCount: BigInt!
    beetsPrice: BigDecimal!
    circulatingSupply: BigDecimal!
    marketCap: BigDecimal!
    swapFee24h: BigDecimal!
    swapVolume24h: BigDecimal!
}

type GqlBeetsFarm {
    id: ID!
    pair: Bytes!
    allocPoint: Int!
    slpBalance: BigInt!
    userCount: BigInt!
    block: BigInt!
    lastRewardBlock: BigInt!
    timestamp: BigInt!
    masterChef: GqlBeetsMasterChef!
    rewarder: GqlBeetsRewarder
}

type GqlBeetsMasterChef {
    id: ID!
    beetsPerBlock: BigInt!
    totalAllocPoint: Int!
}

type GqlBeetsRewarder {
    id: ID!
    rewardPerSecond: BigInt!
    rewardToken: Bytes!
}

type GqlBeetsFarmUser {
    id: ID!
    address: Bytes!
    amount: BigInt!
    beetsHarvested: BigInt!
    farmId: ID!
    rewardDebt: BigInt!
    timestamp: BigInt!
}

type GqlBeetsConfig {
    incentivizedPools: [String!]!
    pausedPools: [String!]!
    blacklistedPools: [String!]!
    featuredPools: [String!]!
    homeFeaturedPools: [GqlBeetsConfigFeaturedPool!]!
}

type GqlBeetsConfigFeaturedPool {
    poolId: String!
    image: String!
    description: String
}
